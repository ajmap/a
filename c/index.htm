<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Python</title>
  <style>
    * {
      margin: 0;
    }

    #start-screen {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #111;
      color: #fff;
      font-size: 2rem;
      cursor: pointer;
    }

    #reader {
      margin: 2vh 0 0 2vw;
      display: none;
      font-size: 1.1rem;
      line-height: 1.15rem;
    }
    .cm { color: #aaa }
  </style>
</head>
<body>
    <div id="start-screen">START</div>
    <div id="reader">
    <p class="cm"># Assigns the string of characters Derek to the variable named my_name</p>
    <p class="cd">my_name = "Derek"</p>
    <br />
    <p class="cm"># Outputs Hello Derek to the screen</p>
    <p class="cd">print("Hello", my_name)</p>
    <br />
    <p class="cm"># You can use \" when you want to use double quotes between double quotes
    </p>
    <p class="cm"># \" is known as an escape sequence</p>
    <p class="cd">print("\"We never really grow up, we only learn how to act in public\" -Bryan White")
    </p>
    <br />
    <p class="cd">''</p>
    <p class="cd">Other Escape Sequences</p>
    <br />
    <p class="cd">Newline : \n</p>
    <p class="cd">Backslash : \\</p>
    <p class="cd">Single Quote : \’</p>
    <p class="cd">Backspace : \b</p>
    <p class="cd">Tab : \t</p>
    <br />
    <p class="cd">There is no maximum value for an integer, as long as you have enough memory. You can however get a practical maximum size with this :
    </p>
    <p class="cd">''</p>
    <br />
    <p class="cd">import sys</p>
    <p class="cd">print(sys.maxsize)</p>
    <br />
    <p class="cm"># You can get the maximum size for a float like this</p>
    <br />
    <p class="cd">import sys</p>
    <p class="cd">print(sys.float_info.max)</p>
    <br />
    <p class="cm"># Floats have 15 digits of precession</p>
    <p class="cd">f1 = 1.1111111111111111</p>
    <p class="cd">f2 = 1.1111111111111111</p>
    <p class="cd">f3 = f1 + f2</p>
    <p class="cd">print(f3)</p>
    <br />
    <p class="cm"># This is a complex number</p>
    <p class="cd">Cn1 = 5 + 6j</p>
    <br />
    <p class="cm"># A boolean data type can have either a value of True or False</p>
    <p class="cd">can_vote = True</p>
    <br />
    <p class="cm"># Python is dynamically typed. What that means is a variables data type is determined by the value you assign to it</p>
    <p class="cd">my_age = 43</p>
    <p class="cd">my_age = "Dog"</p>
    <br />
    <p class="cm"># Casting allows you to convert from one type to another</p>
    <p class="cm"># float to int</p>
    <p class="cd">print("Cast ", type(int(5.4)))</p>
    <p class="cm"># float to string</p>
    <p class="cd">print("Cast 2 ", type(str(5.4)))</p>
    <p class="cm"># unicode character to string</p>
    <p class="cd">print("Cast 3 ", type(chr(97)))</p>
    <p class="cm"># character to unicode</p>
    <p class="cd">print("Cast 4 ", type(ord('a')))</p>
    <p class="cm"># integer to float</p>
    <p class="cd">print("Cast 5 ", type(float(2)))</p>
    <br />
    <p class="cm"># This is a comment. Anything after # is ignored</p>
    <p class="cm"># Write notes about how your code works here</p>
    <br />
    <p class="cd">''</p>
    <p class="cd">I’m a multi-line comment</p>
    <p class="cd">''</p>
    <br />
    <p class="cm"># Variable names are case sensitive. For example Age is not the same as age.</p>
    <p class="cd">Age = 2</p>
    <p class="cd">Age = 3</p>
    <br />
    <p class="cm"># Make sure you are casting to the correct data type when working with variables</p>
    <p class="cm"># Make sure that you surround calculations with parentheses when they produce a single value</p>
    <p class="cd">num_1 = "1"</p>
    <p class="cd">num_2 = "2"</p>
    <p class="cd">print("1 + 2 =", (int(num_1) + int(num_2)))</p>
    <br />
  </div>
  <script>
    const startScreen = document.getElementById('start-screen');
    const reader = document.getElementById('reader');
    startScreen.onclick = async () => {
      startScreen.style.display = 'none';
      reader.style.display = 'block';
      if (document.documentElement.requestFullscreen) {
        await document.documentElement.requestFullscreen();
      }
      setTimeout(() => {
        window.scrollTo(0, document.body.scrollHeight);
      }, 100); // even wachten tot layout klaar is
    };
  </script>
</body>
</html>
