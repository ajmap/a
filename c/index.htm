<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>C#</title>
    <style>
      * {
        margin: 0;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 19px;
      }
      main {
        width: 394px;
        padding: 8px;
      }
      p {
        text-align: justify;
        text-justify: inter-word;
      }
      .a {
        font-size: 23px;
        text-align: left;
      }
      div {
        font-family: "Courier New", Courier, monospace;
        text-align: left;
        font-size: 18px;
        color: blue;
      }

      i {
        display: block;
        color: powderblue;
        font-size: 15px;
      }
    </style>
  </head>
  <body>
    <main>
      <p class="a">Constructors</p>
      <br />
      <p>
        A class constructor is a special member method of a class that is
        executed whenever a new object of that class is created.
      </p>
      <p>
        A constuctor has exactly the same name as its class, is public, and does
        not have any return type.
      </p>
      <br />
      <i>For example:</i>
      <br />
      <div>
        class Person<br />{<br />&nbsp; private int age;<br />&nbsp; public
        Person()<br />&nbsp; {<br />&nbsp; &nbsp; Console.WriteLine("Hi
        there");<br />&nbsp; } <br />}
      </div>
      <br />
      <p>
        Now, upon the creation of an object of type Person, the constuctor is
        automatically called.
      </p>
      <br />
      <div>
        static void Main(string[] args)<br />
        {<br />&nbsp; Person p = new Person(); <br />}
      </div>
      <br />
      <p>
        This can be useful in a number of situations. For example, when creating
        an object of type BankAccount, you could send an email notification to
        the owner. The same functionality could be achieved using a separate
        public method. The advantage of the constructor is that it is called
        automatically.
      </p>
      <br />
      <p>
        Constructors can be very useful for setting initial values for certain
        member variables. <br />
        A default constuctor has no parameters. However, when needed, parameters
        can be added to a constructor. This makes it possible to assign an
        initial value to an object when it's created, as shown in the following
        example.
      </p>
      <br />
      <div>
        class Person<br />{<br />&nbsp; private int age;<br />&nbsp; private
        string name;<br />&nbsp; public Person(string nm)<br />&nbsp; {<br />&nbsp;
        &nbsp; name = nm;<br />&nbsp; } <br />&nbsp; public string getName()<br />&nbsp;
        {<br />&nbsp; &nbsp; return name;<br />&nbsp; } <br />}<br />
        static void Main(string[] args)<br />
        {<br />&nbsp; Person p = new Person("David"); <br />&nbsp;
        Console.WriteLine(p.getName()); <br />}
      </div>
      <br />
      <p>
        Now, when the object is created, we can pass a parameter that will be
        assigned to the name variable.
        <br />
        Constructors can be overloaded like any method by using different
        numbers of parameters.
      </p>
    </main>
  </body>
</html>
