<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>JS2</title>
  <style>
    * {
      margin: 0;
    }

    #start-screen {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #111;
      color: #fff;
      font-size: 2rem;
      cursor: pointer;
    }

    #reader {
      margin: 2vh 0 0 2vw;
      display: none;
      font-size: 1.1rem;
      line-height: 1.15rem;
    }
    .cm { color: #aaa }
  </style>
</head>
<body>
    <div id="start-screen">START</div>
    <div id="reader">
    <p class="cm">// Loop through arrays</p>
    <p class="cd">const items = ['book', 'table', 'chair', 'kite'];</p>
    <p class="cd">const users = [{ name: 'Brad' }, { name: 'Kate' }, { name: 'Steve' }];</p>
    <br />
    <p class="cm">// for (const item of items) {</p>
    <p class="cm">// console.log(item);</p>
    <p class="cm">// }</p>
    <br />
    <p class="cd">for (const user of users) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(user.name);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop over strings</p>
    <p class="cd">const str = 'Hello World';</p>
    <br />
    <p class="cd">for (const letter of str) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(letter);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop over Maps</p>
    <p class="cd">const map = new Map();</p>
    <p class="cd">map.set('name', 'John');</p>
    <p class="cd">map.set('age', 30);</p>
    <br />
    <p class="cd">for (const [key, value] of map) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(key, value);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop through objects</p>
    <p class="cd">const colorObj = {</p>
    <p class="cd">color1: 'red',</p>
    <p class="cd">color2: 'blue',</p>
    <p class="cd">color3: 'orange',</p>
    <p class="cd">color4: 'green',</p>
    <p class="cd">};</p>
    <br />
    <p class="cd">for (const key in colorObj) {</p>
    <p class="cd">console.log(key, colorObj[key]);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop through arrays</p>
    <p class="cd">const colorArr = ['red', 'green', 'blue', 'yellow'];</p>
    <br />
    <p class="cd">for (const key in colorArr) {</p>
    <p class="cd">console.log(colorArr[key]);</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">const socials = ['Twitter', 'LinkedIn', 'Facebook', 'Instagram'];</p>
    <br />
    <p class="cm">// View prototype chain</p>
    <p class="cd">console.log(socials.__proto__);</p>
    <br />
    <p class="cm">// Long form</p>
    <p class="cd">socials.forEach(function (item) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(item);</p>
    <p class="cd">});</p>
    <br />
    <p class="cm">// Short form</p>
    <p class="cd">socials.forEach((item) => console.log(item));</p>
    <br />
    <p class="cm">// We can also pass in the index and original array</p>
    <p class="cd">socials.forEach((item, index, arr) => console.log(`${index} - ${item}`,arr));</p>
    <br />
    <p class="cm">// Using a named function</p>
    <p class="cd">function logSocials(social) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(social);</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">socials.forEach(logSocials);</p>
    <br />
    <p class="cm">// Array of objects</p>
    <p class="cd">const socialObjs = [</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Twitter', url: 'https://twitter.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Facebook', url: 'https://facebook.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Linkedin', url: 'https://linkedin.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Instagram', url: 'https://instagram.com' },</p>
    <p class="cd">];</p>
    <br />
    <p class="cd">socialObjs.forEach((item) => console.log(item.url));</p>
    <br />
    <p class="cd">const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];</p>
    <br />
    <p class="cd">const evenNumbers = numbers.filter(function (number) {</p>
    <p class="cd">&nbsp;&nbsp;return number % 2 === 0;</p>
    <p class="cd">});</p>
    <br />
    <p class="cm">// Short version</p>
    <p class="cd">const evenNumbers2 = numbers.filter((number) => number % 2 === 0);</p>
    <br />
    <p class="cm">// Same with forEach</p>
    <p class="cd">const evenNumbers3 = [];</p>
    <p class="cd">numbers.forEach((number) => {</p>
    <p class="cd">&nbsp;&nbsp;if (number % 2 === 0) {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;evenNumbers.push(number);</p>
    <p class="cd">&nbsp;&nbsp;}</p>
    <p class="cd">});</p>
    <br />
    <p class="cd">const companies = [</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company One', category: 'Finance', start: 1981, end: 2004 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Two', category: 'Retail', start: 1992, end: 2008 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Three', category: 'Auto', start: 1999, end: 2007 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Four', category: 'Retail', start: 1989, end: 2010 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Five', category: 'Technology', start: 2009, end: 2014 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Six', category: 'Finance', start: 1987, end: 2010 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Seven', category: 'Auto', start: 1986, end: 1996 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Eight', category: 'Technology', start: 2011, end: 2016 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Nine', category: 'Retail', start: 1981, end: 1989 },</p>
    <p class="cd">];</p>
    <br />
    <p class="cm">// Get only retail companies</p>
    <p class="cd">const retailCompanies = companies.filter(</p>
    <p class="cd">&nbsp;&nbsp;(company) => company.category === 'Retail'</p>
    <p class="cd">);</p>
    <p class="cm">// console.log(retailCompanies);</p>
    <br />
    <p class="cm">// Get companies that started in or after 1980 and ended in or before 2005</p>
    <p class="cd">const earlyCompanies = companies.filter(</p>
    <p class="cd">&nbsp;&nbsp;(company) => company.start >= 1980 && company.end <= 2005</p>
    <p class="cd">);</p>
    <p class="cm">// console.log(earlyCompanies);</p>
    <br />
    <p class="cm">// Get companies that lasted 10 years or more</p>
    <p class="cd">const longCompanies = companies.filter(</p>
    <p class="cd">&nbsp;&nbsp;(company) => company.end - company.start >= 10</p>
    <p class="cd">);</p>
    <br />
    <p class="cd">console.log(longCompanies);</p>
    <br />
    <p class="cd">const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</p>
    <br />
    <p class="cd">
      const doubledNumbers = numbers.map((number) => number * 2);
    </p>
    <p class="cd">console.log(doubledNumbers);</p>
    <br />
    <p class="cm">// Same with forEach</p>
    <p class="cd">const doubledNumbers2 = [];</p>
    <p class="cd">numbers.forEach((number) => {</p>
    <p class="cd">&nbsp;&nbsp;doubledNumbers2.push(number * 2);</p>
    <p class="cd">});</p>
    <br />
    <p class="cd">const companies = [</p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company One', category: 'Finance', start: 1981, end:
      2004 },
    </p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company Two', category: 'Retail', start: 1992, end:
      2008 },
    </p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company Three', category: 'Auto', start: 1999, end:
      2007 },
    </p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company Four', category: 'Retail', start: 1989, end:
      2010 },
    </p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company Five', category: 'Technology', start: 2009,
      end: 2014 },
    </p>
    <p class="cd">
      &nbsp;&nbsp;{ name: 'Company Six', category: 'Finance', start: 1987, end:
      2010 },
    </p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Seven', category: 'Auto', start: 1986, end: 1996 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Eight', category: 'Technology', start: 2011, end: 2016 },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Company Nine', category: 'Retail', start: 1981, end:1989 },</p>
    <p class="cd">];</p>
    <br />
    <p class="cm">// Create an array of company names</p>
    <p class="cd">const companyNames = companies.map((company) => company.name);</p>
    <p class="cm">// console.log(companyNames);</p>
    <br />
    <p class="cm">// Create an array with just company and category</p>
    <p class="cd">const companyInfo = companies.map((company) => {</p>
    <p class="cd">&nbsp;&nbsp;return {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;name: company.name,</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;category: company.category,</p>
    <p class="cd">&nbsp;&nbsp;};</p>
    <p class="cd">});</p>
    <br />
    <p class="cm">// Create an array of objects with the name and the length of each company in years</p>
    <p class="cd">const companyYears = companies.map((company) => {</p>
    <p class="cd">&nbsp;&nbsp;return {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;name: company.name,</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;length: company.end - company.start + ' years',</p>
    <p class="cd">&nbsp;&nbsp;};</p>
    <p class="cd">});</p>
    <br />
    <p class="cd">console.log(companyYears);</p>
    <br />
    <p class="cm">// Chain map methods</p>
    <p class="cd">const squareAndDouble = numbers</p>
    <p class="cd">&nbsp;&nbsp;.map((number) => Math.sqrt(number))</p>
    <p class="cd">&nbsp;&nbsp;.map((sqrt) => sqrt * 2);</p>
    <br />
    <p class="cd">const squareAndDouble2 = numbers</p>
    <p class="cd">&nbsp;&nbsp;.map(function (number) {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(number);</p>
    <p class="cd">&nbsp;&nbsp;})</p>
    <p class="cd">&nbsp;&nbsp;.map(function (sqrt) {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;return sqrt * 2;</p>
    <p class="cd">&nbsp;&nbsp;})</p>
    <p class="cd">&nbsp;&nbsp;.map(function (sqrtDoubled) {</p>
    <p class="cd">&nbsp;&nbsp;&nbsp;&nbsp;return sqrtDoubled * 3;</p>
    <p class="cd">&nbsp;&nbsp;});</p>
    <br />
    <p class="cm">// Chaining different methods</p>
    <p class="cd">const evenDouble = numbers</p>
    <p class="cd">&nbsp;&nbsp;.filter((number) => number % 2 === 0)</p>
    <p class="cd">&nbsp;&nbsp;.map((number) => number * 2);</p>
    <br />
    <p class="cd">console.log(evenDouble);</p>
    <br />  
  </div>
  <script>
    const startScreen = document.getElementById('start-screen');
    const reader = document.getElementById('reader');
    startScreen.onclick = async () => {
      startScreen.style.display = 'none';
      reader.style.display = 'block';
      if (document.documentElement.requestFullscreen) {
        await document.documentElement.requestFullscreen();
      }
      setTimeout(() => {
        window.scrollTo(0, document.body.scrollHeight);
      }, 100); // even wachten tot layout klaar is
    };
  </script>
</body>
</html>
