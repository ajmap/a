<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Lees App</title>
  <style>
    * {
      margin: 0;
    }

    #start-screen {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #111;
      color: #fff;
      font-size: 2rem;
      cursor: pointer;
    }

    #reader {
      margin: 2vh 0 0 2vw;
      display: none;
      font-size: 1.1rem;
      line-height: 1.15rem;
    }
    .cm { color: #aaa }
  </style>
</head>
<body>

  <div id="start-screen">START</div>

  <div id="reader">
        <p class="cm">// Log number</p>
    <p class="cd">console.log(100);</p>
<br>
    <p class="cm">// Log string</p>
    <p class="cd">console.log('Hello World');</p>
<br>
    <p class="cm">// Log multiple values</p>
    <p class="cd">console.log(20, 'Hello', true);</p>
<br>
    <p class="cm">// Log a variable</p>
    <p class="cd">const x = 100;</p>
    <p class="cd">console.log(x);</p>
<br>
    <p class="cm">// Console error & warning</p>
    <p class="cd">console.error('Alert');</p>
    <p class="cd">console.warn('Warning');</p>
<br>
    <p class="cm">// Log object as table</p>
    <p class="cd">console.table({ name: 'Brad', email: 'brad@gmail.com' });</p>
<br>
    <p class="cm">// Group console commands</p>
    <p class="cd">console.group('simple');</p>
    <p class="cd">console.log(x);</p>
    <p class="cd">console.error('Alert');</p>
    <p class="cd">console.warn('Warning');</p>
    <p class="cd">console.groupEnd();</p>
<br>
    <p class="cm">// Add CSS to logs</p>
    <p class="cd">
      const styles = 'padding: 10px; background-color: white; color: green';
    </p>
    <p class="cd">console.log('%cHello World', styles);</p>
<br>
        <p class="cm">// This is a single line of code</p>
    <br />
    <p class="cm">/*</p>
    <p class="cm">Multi-line comment</p>
    <p class="cm">console.log(100);</p>
    <br />
    <p class="cm">console.log('Hello World');</p>
    <br />
    <p class="cm">console.log(20, 'Hello', true);</p>
    <p class="cm">*/</p>
    <br />
        <p class="cm">// Ways to declare a variable</p>
    <p class="cm">// `var`, `let`, & `const`</p>
    <br />
    <p class="cd">let firstName = 'John';</p>
    <p class="cd">const lastName = 'Doe';</p>
    <p class="cd">let age = 30;</p>
    <br />
    <p class="cd">console.log(age);</p>
    <br />
    <p class="cm">// Naming Conventions</p>
    <p class="cm">// - Only letters, numbers, underscores and dollar signs</p>
    <p class="cm">// - Can't start with a number</p>
    <br />
    <p class="cm">// Multi-Word Formatting</p>
    <p class="cm">// firstName = camelCase</p>
    <p class="cm">// first_name = underscore</p>
    <p class="cm">// FirstName = PascalCase</p>
    <p class="cm">// firstname = lowercase</p>
    <br />
    <p class="cm">
      // We can re-assign `let` variables. If you change `age` to use `const`,
      you will get an error
    </p>
    <p class="cd">age = 31;</p>
    <p class="cd">console.log(age);</p>
    <br />
    <p class="cm">
      // With let, we can declare a value without assigning a value
    </p>
    <p class="cd">let score;</p>
    <p class="cd">score = 1;</p>
    <p class="cd">console.log(score);</p>
    <br />
    <p class="cd">if (true) {</p>
    <p class="cd">&nbsp;&nbsp;score = score + 1;</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">console.log(score);</p>
    <br />
    <p class="cd">const x = 100;</p>
    <br />
    <p class="cm">// We can not re-assign a const variable</p>
    <p class="cm">// x = 200 // Will result in an error</p>
    <br />
    <p class="cm">// We can still manipulate arrays and objects using const</p>
    <p class="cd">const arr = [1, 2, 3, 4];</p>
    <p class="cd">arr.push(5);</p>
    <p class="cd">console.log(arr);</p>
    <br />
    <p class="cd">const person = {</p>
    <p class="cd">&nbsp;&nbsp;name: 'Brad',</p>
    <p class="cd">};</p>
    <p class="cd">person.name = 'John';</p>
    <p class="cd">person.email = 'brad@gmail.com';</p>
    <p class="cd">console.log(person);</p>
    <br />
    <p class="cm">// Declare multiple values at once</p>
    <p class="cd">let a, b, c;</p>
    <br />
    <p class="cd">const d = 10,</p>
    <p class="cd">&nbsp;&nbsp;e = 20,</p>
    <p class="cd">&nbsp;&nbsp;f = 30;</p>
    <br />
    <p class="cd">console.log(d);</p>
    <p class="cd">console.log(a);</p>
    <br />
        <p class="cm">// String</p>
    <p class="cd">const firstName = 'Sara';</p>
    <br />
    <p class="cm">// Number</p>
    <p class="cd">const age = 30;</p>
    <p class="cd">const temp = 98.9;</p>
    <br />
    <p class="cm">// Boolean</p>
    <p class="cd">const hasKids = true;</p>
    <br />
    <p class="cm">// Null</p>
    <p class="cd">const aptNumber = null;</p>
    <br />
    <p class="cm">// Undefined</p>
    <p class="cm">// let score;</p>
    <p class="cd">const score = undefined;</p>
    <br />
    <p class="cm">// Symbol</p>
    <p class="cd">const id = Symbol('id');</p>
    <br />
    <p class="cm">// BigInt</p>
    <p class="cd">const n = 9007199254740991n;</p>
    <br />
    <p class="cm">// Reference Types</p>
    <br />
    <p class="cd">const numbers = [1, 2, 3, 4];</p>
    <br />
    <p class="cd">const person = {</p>
    <p class="cd">&nbsp;&nbsp;name: 'Brad',</p>
    <p class="cd">};</p>
    <br />
    <p class="cd">function sayHello() {</p>
    <p class="cd">&nbsp;&nbsp;console.log('Hello');</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">const output = sayHello;</p>
    <br />
    <p class="cd">console.log(output, typeof output);</p>
    <br />
    <p class="cm">// More info on why typeof null == object</p>
    <p class="cm">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null</p>
    <br />
    <p class="cm">// More info on the "function object" type</p>
    <p class="cm">// https://262.ecma-international.org/5.1/#sec-11.4.3</p>
    <br />
  </div>

  <script>
    const startScreen = document.getElementById('start-screen');
    const reader = document.getElementById('reader');

    startScreen.onclick = async () => {
      startScreen.style.display = 'none';
      reader.style.display = 'block';

      // Fullscreen activeren (indien ondersteund)
      if (document.documentElement.requestFullscreen) {
        await document.documentElement.requestFullscreen();
      }

      // Scroll direct naar het einde
      setTimeout(() => {
        window.scrollTo(0, document.body.scrollHeight);
      }, 100); // even wachten tot layout klaar is
    };
  </script>

</body>
</html>
