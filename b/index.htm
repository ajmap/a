<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Javascript</title>
  <style>
    * {
      margin: 0;
    }

    #start-screen {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: #111;
      color: #fff;
      font-size: 2rem;
      cursor: pointer;
    }

    #reader {
      margin: 2vh 0 0 2vw;
      display: none;
      font-size: 1.1rem;
      line-height: 1.15rem;
    }
    .cm { color: #aaa }
  </style>
</head>
<body>
    <div id="start-screen">START</div>
    <div id="reader">
    <p class="cm">// Log number</p>
    <p class="cd">console.log(100);</p>
    <br>
    <p class="cm">// Log string</p>
    <p class="cd">console.log('Hello World');</p>
    <br>
    <p class="cm">// Log multiple values</p>
    <p class="cd">console.log(20, 'Hello', true);</p>
    <br>
    <p class="cm">// Log a variable</p>
    <p class="cd">const x = 100;</p>
    <p class="cd">console.log(x);</p>
    <br>
    <p class="cm">// Console error & warning</p>
    <p class="cd">console.error('Alert');</p>
    <p class="cd">console.warn('Warning');</p>
    <br>
    <p class="cm">// Log object as table</p>
    <p class="cd">console.table({ name: 'Brad', email: 'brad@gmail.com' });</p>
    <br>
    <p class="cm">// Group console commands</p>
    <p class="cd">console.group('simple');</p>
    <p class="cd">console.log(x);</p>
    <p class="cd">console.error('Alert');</p>
    <p class="cd">console.warn('Warning');</p>
    <p class="cd">console.groupEnd();</p>
    <br>
    <p class="cm">// Add CSS to logs</p>
    <p class="cd">const styles = 'padding: 10px; background-color: white; color: green';
    </p>
    <p class="cd">console.log('%cHello World', styles);</p>
    <br>
    <p class="cm">// This is a single line of code</p>
    <br />
    <p class="cm">/*</p>
    <p class="cm">Multi-line comment</p>
    <p class="cm">console.log(100);</p>
    <br />
    <p class="cm">console.log('Hello World');</p>
    <br />
    <p class="cm">console.log(20, 'Hello', true);</p>
    <p class="cm">*/</p>
    <br />
    <p class="cm">// Ways to declare a variable</p>
    <p class="cm">// `var`, `let`, & `const`</p>
    <br />
    <p class="cd">let firstName = 'John';</p>
    <p class="cd">const lastName = 'Doe';</p>
    <p class="cd">let age = 30;</p>
    <br />
    <p class="cd">console.log(age);</p>
    <br />
    <p class="cm">// Naming Conventions</p>
    <p class="cm">// - Only letters, numbers, underscores and dollar signs</p>
    <p class="cm">// - Can't start with a number</p>
    <br />
    <p class="cm">// Multi-Word Formatting</p>
    <p class="cm">// firstName = camelCase</p>
    <p class="cm">// first_name = underscore</p>
    <p class="cm">// FirstName = PascalCase</p>
    <p class="cm">// firstname = lowercase</p>
    <br />
    <p class="cm">// We can re-assign `let` variables. If you change `age` to use `const`, you will get an error
    </p>
    <p class="cd">age = 31;</p>
    <p class="cd">console.log(age);</p>
    <br />
    <p class="cm">// With let, we can declare a value without assigning a value
    </p>
    <p class="cd">let score;</p>
    <p class="cd">score = 1;</p>
    <p class="cd">console.log(score);</p>
    <br />
    <p class="cd">if (true) {</p>
    <p class="cd">&nbsp;&nbsp;score = score + 1;</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">console.log(score);</p>
    <br />
    <p class="cd">const x = 100;</p>
    <br />
    <p class="cm">// We can not re-assign a const variable</p>
    <p class="cm">// x = 200 // Will result in an error</p>
    <br />
    <p class="cm">// We can still manipulate arrays and objects using const</p>
    <p class="cd">const arr = [1, 2, 3, 4];</p>
    <p class="cd">arr.push(5);</p>
    <p class="cd">console.log(arr);</p>
    <br />
    <p class="cd">const person = {</p>
    <p class="cd">&nbsp;&nbsp;name: 'Brad',</p>
    <p class="cd">};</p>
    <p class="cd">person.name = 'John';</p>
    <p class="cd">person.email = 'brad@gmail.com';</p>
    <p class="cd">console.log(person);</p>
    <br />
    <p class="cm">// Declare multiple values at once</p>
    <p class="cd">let a, b, c;</p>
    <br />
    <p class="cd">const d = 10,</p>
    <p class="cd">&nbsp;&nbsp;e = 20,</p>
    <p class="cd">&nbsp;&nbsp;f = 30;</p>
    <br />
    <p class="cd">console.log(d);</p>
    <p class="cd">console.log(a);</p>
    <br />
    <p class="cm">// String</p>
    <p class="cd">const firstName = 'Sara';</p>
    <br />
    <p class="cm">// Number</p>
    <p class="cd">const age = 30;</p>
    <p class="cd">const temp = 98.9;</p>
    <br />
    <p class="cm">// Boolean</p>
    <p class="cd">const hasKids = true;</p>
    <br />
    <p class="cm">// Null</p>
    <p class="cd">const aptNumber = null;</p>
    <br />
    <p class="cm">// Undefined</p>
    <p class="cm">// let score;</p>
    <p class="cd">const score = undefined;</p>
    <br />
    <p class="cm">// Symbol</p>
    <p class="cd">const id = Symbol('id');</p>
    <br />
    <p class="cm">// BigInt</p>
    <p class="cd">const n = 9007199254740991n;</p>
    <br />
    <p class="cm">// Reference Types</p>
    <br />
    <p class="cd">const numbers = [1, 2, 3, 4];</p>
    <br />
    <p class="cd">const person = {</p>
    <p class="cd">&nbsp;&nbsp;name: 'Brad',</p>
    <p class="cd">};</p>
    <br />
    <p class="cd">function sayHello() {</p>
    <p class="cd">&nbsp;&nbsp;console.log('Hello');</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">const output = sayHello;</p>
    <br />
    <p class="cd">console.log(output, typeof output);</p>
    <br />
    <p class="cm">// More info on why typeof null == object</p>
    <p class="cm">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null</p>
    <br />
    <p class="cm">// More info on the "function object" type</p>
    <p class="cm">// https://262.ecma-international.org/5.1/#sec-11.4.3</p>
    <br />
    <p class="cm">// Value is stored in the stack</p>
    <p class="cd">const name = 'John';</p>
    <p class="cd">const age = 30;</p>
    <br />
    <p class="cm">// Reference is stored in the heap</p>
    <p class="cd">const person = {</p>
    <p class="cd">&nbsp;&nbsp;name: 'Brad',</p>
    <p class="cd">&nbsp;&nbsp;age: 40,</p>
    <p class="cd">};</p>
    <br />
    <p class="cd">let newName = name;</p>
    <p class="cd">newName = 'Jonathan';</p>
    <br />
    <p class="cd">let newPerson = person;</p>
    <p class="cd">newPerson.name = 'Bradley';</p>
    <br />
    <p class="cd">console.log(name, newName); <span class="cm">// John, Jonathan</span></p>
    <p class="cd">console.log(person, newPerson); <span class="cm">// { name: 'Bradley', age: 40 }, { name: 'Bradley', age: 40 }</span</p>
    <br />
    <p class="cd">let amount = 'hello';</p>
    <br />
    <p class="cm">// Convert string to number</p>
    <p class="cd">amount = parseInt(amount);</p>
    <p class="cd">amount = +amount;</p>
    <p class="cd">amount = Number(amount);</p>
    <br />
    <p class="cm">// Convert number to string</p>
    <p class="cd">amount = amount.toString();</p>
    <p class="cd">amount = String(amount);</p>
    <br />
    <p class="cm">// Convert string to decimal</p>
    <p class="cd">amount = parseFloat(amount);</p>
    <br />
    <p class="cm">// Convert number to boolean</p>
    <p class="cd">amount = Boolean(amount);</p>
    <br />
    <p class="cm">// Ways to get NaN</p>
    <p class="cd">console.log(Math.sqrt(-1));</p>
    <p class="cd">console.log(1 + NaN);</p>
    <p class="cd">console.log(undefined + undefined);</p>
    <p class="cd">console.log('foo' / 3);</p>
    <br />
    <p class="cd">console.log(amount, typeof amount);</p>
    <br />
    <p class="cm">// 1. Arithmetic Operators</p>
    <br />
    <p class="cd">let x;</p>
    <br />
    <p class="cd">x = 5 + 5;</p>
    <p class="cd">x = 5 - 5;</p>
    <p class="cd">x = 5 * 5;</p>
    <p class="cd">x = 5 / 5;</p>
    <p class="cd">x = 7 % 5;</p>
    <br />
    <p class="cm">// Concatenation</p>
    <p class="cd">x = 'Hello' + ' ' + 'World';</p>
    <br />
    <p class="cm">// Exponent</p>
    <p class="cd">x = 2 ** 3;</p>
    <br />
    <p class="cm">// Increment</p>
    <p class="cd">x = 1;</p>
    <p class="cm">// x = x + 1;</p>
    <p class="cd">x++;</p>
    <br />
    <p class="cm">// Decrement</p>
    <p class="cm">// x = x - 1;</p>
    <p class="cd">x--;</p>
    <br />
    <p class="cm">// 2. Assignment Operators</p>
    <br />
    <p class="cd">x = 10;</p>
    <br />
    <p class="cd">x += 5;</p>
    <p class="cd">x -= 5;</p>
    <p class="cd">x *= 5;</p>
    <p class="cd">x /= 5;</p>
    <p class="cd">x %= 5;</p>
    <p class="cd">x **= 5;</p>
    <br />
    <p class="cm">// 3. Comparison Operators</p>
    <br />
    <p class="cm">// Equal to (Just the value, not the type)</p>
    <p class="cd">x = 2 == '2';</p>
    <br />
    <p class="cm">// Equal to (Type and value)</p>
    <p class="cd">x = 2 === '2';</p>
    <br />
    <p class="cm">// Not equal to (Just the value, not the type)</p>
    <p class="cd">x = 2 != '2';</p>
    <br />
    <p class="cm">// Not equal to (Type and value)</p>
    <p class="cd">x = 2 !== 2;</p>
    <br />
    <p class="cm">// Greater than and less than</p>
    <p class="cd">x = 10 > 5;</p>
    <p class="cd">x = 10 < 5;</p>
    <p class="cd">x = 10 <= 5;</p>
    <p class="cd">x = 10 >= 5;</p>
    <br />
    <p class="cd">console.log(x);</p>
    <br />
    <p class="cd">let x;</p>
    <br />
    <p class="cm">// Coerced to a string</p>
    <p class="cd">x = 5 + '5';</p>
    <br />
    <p class="cd">x = 5 + Number('5');</p>
    <br />
    <p class="cm">// Coerced to a number</p>
    <p class="cd">x = 5 * '5';</p>
    <br />
    <p class="cm">// null is coerced to 0 as it is a `falsy` value</p>
    <p class="cd">x = 5 + null;</p>
    <br />
    <p class="cd">x = Number(null);</p>
    <br />
    <p class="cd">x = Number(true);</p>
    <p class="cd">x = Number(false);</p>
    <br />
    <p class="cm">// true is coerced to a 1</p>
    <p class="cd">x = 5 + true;</p>
    <br />
    <p class="cm">// false is coerced to 0 (falsy)</p>
    <p class="cd">x = 5 + false;</p>
    <br />
    <p class="cm">// Undefined is coerced to 0 (falsy)</p>
    <p class="cd">x = 5 + undefined;</p>
    <br />
    <p class="cd">console.log(x, typeof x);</p>
    <br />
    <p class="cd">let x;</p>
    <br />
    <p class="cd">const name = 'John';</p>
    <p class="cd">const age = 31;</p>
    <br />
    <p class="cm">// Concatenation</p>
    <p class="cd">x = 'Hello, my name is ' + name + ' and I am ' + age + ' years old';
    </p>
    <br />
    <p class="cm">// Template Literals</p>
    <p class="cd">x = `Hello, my name is ${name} and I am ${age} years old`;</p>
    <br />
    <p class="cm">// String Properties and Methods</p>
    <br />
    <p class="cm">// Creating a "string object" (JS does this automatically when using property or method on a primitive string)
    </p>
    <p class="cd">const s = new String('Hello World');</p>
    <br />
    <p class="cd">x = typeof s;</p>
    <br />
    <p class="cd">x = s.length;</p>
    <br />
    <p class="cm">// Access value by key</p>
    <p class="cd">x = s[0];</p>
    <br />
    <p class="cm">// Shows the prototype of the string object. Shows the properties and methods
    </p>
    <p class="cd">x = s.__proto__;</p>
    <br />
    <p class="cm">// Change case</p>
    <p class="cd">x = s.toUpperCase();</p>
    <p class="cd">x = s.toLowerCase();</p>
    <br />
    <p class="cm">// charAt() - returns the character at the specified index</p>
    <p class="cd">x = s.charAt(0);</p>
    <br />
    <p class="cm">// indexOf - returns the index of the first occurrence of a specified value in a string
    </p>
    <p class="cd">x = s.indexOf('d');</p>
    <br />
    <p class="cm">// substring() - search a string for a specified value</p>
    <p class="cd">x = s.substring(2, 5);</p>
    <p class="cd">x = s.substring(7);</p>
    <br />
    <p class="cm">// slice() - extracts a part of a string and returns a new string
    </p>
    <p class="cd">x = s.slice(-11, -6);</p>
    <br />
    <p class="cm">// trim() - remove whitespace from beginning and end of string</p>
    <p class="cd">x = ' Hello World';</p>
    <p class="cd">x = x.trim();</p>
    <br />
    <p class="cm">// replace() - replace all instances of a string</p>
    <p class="cd">x = s.replace('World', 'John');</p>
    <br />
    <p class="cm">// includes() - returns true if the string is found</p>
    <p class="cd">x = s.includes('Hell');</p>
    <br />
    <p class="cm">// valueOf() - returns the primitive value of a variable</p>
    <p class="cd">x = s.valueOf();</p>
    <br />
    <p class="cm">// split() - returns an array of strings</p>
    <p class="cd">x = s.split('');</p>
    <br />
    <p class="cd">console.log(x);</p>
    <br />  
    <p class="cm">// Create a new string called "myNewString" that holds the value of "Developer", using the lowercase value from "myString"</p>
    <p class="cd">const myString = 'developer';</p>
    <br />
    <p class="cd">let myNewString;</p>
    <br />
    <p class="cm">// Solution 1:</p>
    <p class="cd">myNewString = myString.charAt(0).toUpperCase() + myString.substring(1);</p>
    <p class="cm">// Solution 2:</p>
    <p class="cd">myNewString = myString[0].toUpperCase() + myString.substring(1);</p>
    <p class="cm">// Solution 3:</p>
    <p class="cd">myNewString = `${myString[0].toUpperCase()}${myString.slice(1)}`;</p>
    <br />
    <p class="cd">console.log(myNewString);</p>
    <br />
    <p class="cm">// toExponential() - convert a number to exponential notation and return its value as a string</p>
    <p class="cd">x = num.toExponential(2);</p>
    <br />
    <p class="cm">// toLocaleString() - returns a string representation of the number, using the current locale</p>
    <p class="cd">x = num.toLocaleString('en-US');</p>
    <br />
    <p class="cm">// valueOf - Get value</p>
    <p class="cd">x = num.valueOf();</p>
    <br />
    <p class="cm">// The Number object itself has some properties and methods</p>
    <br />
    <p class="cm">// Largest and smallest possible number</p>
    <p class="cd">x = Number.MAX_VALUE;</p>
    <p class="cd">x = Number.MIN_VALUE;</p>
    <br />
    <p class="cd">console.log(x);</p>
    <br />
    <p class="cd">let x;</p>
    <br />
    <p class="cm">// Square root</p>
    <p class="cd">x = Math.sqrt(9);</p>
    <br />
    <p class="cm">// Absolute value</p>
    <p class="cd">x = Math.abs(-5);</p>
    <br />
    <p class="cm">// Round</p>
    <p class="cd">x = Math.round(4.2);</p>
    <br />
    <p class="cm">// Round up</p>
    <p class="cd">x = Math.ceil(4.2);</p>
    <br />
    <p class="cm">// Round down</p>
    <p class="cd">x = Math.floor(4.9);</p>
    <br />
    <p class="cm">// Exponent</p>
    <p class="cd">x = Math.pow(2, 3);</p>
    <br />
    <p class="cm">// Minimum number</p>
    <p class="cd">x = Math.min(4, 5, 3);</p>
    <br />
    <p class="cm">// Maximum number</p>
    <p class="cd">x = Math.max(4, 5, 3);</p>
    <br />
    <p class="cm">// Get a random number/decimal between 0 and 1</p>
    <p class="cd">x = Math.random();</p>
    <br />
    <p class="cm">// Get a random number between 1 and 100</p>
    <p class="cd">x = Math.floor(Math.random() * 100 + 1);</p>
    <br />
    <p class="cd">console.log(x);</p>
    <br />  
    <p class="cd">const x = Math.floor(Math.random() * 100 + 1);</p>
    <p class="cd">const y = Math.floor(Math.random() * 50 + 1);</p>
    <br />
    <p class="cm">// Get the sum</p>
    <p class="cd">const sum = x + y;</p>
    <p class="cd">const sumOutput = `${x} + ${y} = ${sum}`;</p>
    <p class="cd">console.log(sumOutput);</p>
    <br />
    <p class="cm">// Get the difference</p>
    <p class="cd">const diff = x - y;</p>
    <p class="cd">const diffOutput = `${x} - ${y} = ${diff}`;</p>
    <p class="cd">console.log(diffOutput);</p>
    <br />
    <p class="cm">// Get the product</p>
    <p class="cd">const prod = x * y;</p>
    <p class="cd">const prodOutput = `${x} * ${y} = ${prod}`;</p>
    <p class="cd">console.log(prodOutput);</p>
    <br />
    <p class="cm">// Get the quotient</p>
    <p class="cd">const quot = x / y;</p>
    <p class="cd">const quotOutput = `${x} / ${y} = ${quot}`;</p>
    <p class="cd">console.log(quotOutput);</p>
    <br />
    <p class="cm">// Get the remainder</p>
    <p class="cd">const rm = x % y;</p>
    <p class="cd">const rmOutput = `${x} % ${y} = ${rm}`;</p>
    <p class="cd">console.log(rmOutput);</p>
    <br />
    <p class="cd">let d;</p>
    <br />
    <p class="cm">// Get today's date and time</p>
    <p class="cd">d = new Date();</p>
    <br />
    <p class="cm">// Set to a string</p>
    <p class="cd">d = d.toString();</p>
    <br />
    <p class="cm">// Get a specific date</p>
    <p class="cm">// Important: the month is 0-based, so 0 is January and 11 is December</p>
    <p class="cd">d = new Date(2021, 0, 10, 12, 30, 0);</p>
    <br />
    <p class="cm">// Pass in a string</p>
    <p class="cd">d = new Date('2021-07-10T12:30:00');</p>
    <p class="cd">d = new Date('07/10/2021 12:30:00');</p>
    <p class="cd">d = new Date('2022-07-10');</p>
    <p class="cd">d = new Date('07-10-2022');</p>
    <br />
    <p class="cm">// https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off</p>
    <br />
    <p class="cm">// Get current timestamp</p>
    <p class="cd">d = Date.now();</p>
    <br />
    <p class="cm">// Get the timestamp of a specific date</p>
    <p class="cd">d = new Date();</p>
    <p class="cd">d = d.getTime();</p>
    <p class="cd">d = d.valueOf();</p>
    <br />
    <p class="cm">// Create a date from a timestamp</p>
    <p class="cd">d = new Date(1666962049745);</p>
    <br />
    <p class="cm">// Convert from milliseconds to seconds</p>
    <p class="cd">d = Math.floor(Date.now() / 1000);</p>
    <br />
    <p class="cd"></p>
    <p class="cd">console.log(d);</p>
    <br />  
    = = = = = = = = 
    <p class="cm">// Loop through arrays</p>
    <p class="cd">const items = ['book', 'table', 'chair', 'kite'];</p>
    <p class="cd">const users = [{ name: 'Brad' }, { name: 'Kate' }, { name: 'Steve' }];</p>
    <br />
    <p class="cm">// for (const item of items) {</p>
    <p class="cm">// console.log(item);</p>
    <p class="cm">// }</p>
    <br />
    <p class="cd">for (const user of users) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(user.name);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop over strings</p>
    <p class="cd">const str = 'Hello World';</p>
    <br />
    <p class="cd">for (const letter of str) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(letter);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop over Maps</p>
    <p class="cd">const map = new Map();</p>
    <p class="cd">map.set('name', 'John');</p>
    <p class="cd">map.set('age', 30);</p>
    <br />
    <p class="cd">for (const [key, value] of map) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(key, value);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop through objects</p>
    <p class="cd">const colorObj = {</p>
    <p class="cd">color1: 'red',</p>
    <p class="cd">color2: 'blue',</p>
    <p class="cd">color3: 'orange',</p>
    <p class="cd">color4: 'green',</p>
    <p class="cd">};</p>
    <br />
    <p class="cd">for (const key in colorObj) {</p>
    <p class="cd">console.log(key, colorObj[key]);</p>
    <p class="cd">}</p>
    <br />
    <p class="cm">// Loop through arrays</p>
    <p class="cd">const colorArr = ['red', 'green', 'blue', 'yellow'];</p>
    <br />
    <p class="cd">for (const key in colorArr) {</p>
    <p class="cd">console.log(colorArr[key]);</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">const socials = ['Twitter', 'LinkedIn', 'Facebook', 'Instagram'];</p>
    <br />
    <p class="cm">// View prototype chain</p>
    <p class="cd">console.log(socials.__proto__);</p>
    <br />
    <p class="cm">// Long form</p>
    <p class="cd">socials.forEach(function (item) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(item);</p>
    <p class="cd">});</p>
    <br />
    <p class="cm">// Short form</p>
    <p class="cd">socials.forEach((item) => console.log(item));</p>
    <br />
    <p class="cm">// We can also pass in the index and original array</p>
    <p class="cd">socials.forEach((item, index, arr) => console.log(`${index} - ${item}`,arr));</p>
    <br />
    <p class="cm">// Using a named function</p>
    <p class="cd">function logSocials(social) {</p>
    <p class="cd">&nbsp;&nbsp;console.log(social);</p>
    <p class="cd">}</p>
    <br />
    <p class="cd">socials.forEach(logSocials);</p>
    <br />
    <p class="cm">// Array of objects</p>
    <p class="cd">const socialObjs = [</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Twitter', url: 'https://twitter.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Facebook', url: 'https://facebook.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Linkedin', url: 'https://linkedin.com' },</p>
    <p class="cd">&nbsp;&nbsp;{ name: 'Instagram', url: 'https://instagram.com' },</p>
    <p class="cd">];</p>
    <br />
    <p class="cd">socialObjs.forEach((item) => console.log(item.url));</p>
    <br />  
  </div>
  <script>
    const startScreen = document.getElementById('start-screen');
    const reader = document.getElementById('reader');
    startScreen.onclick = async () => {
      startScreen.style.display = 'none';
      reader.style.display = 'block';
      if (document.documentElement.requestFullscreen) {
        await document.documentElement.requestFullscreen();
      }
      setTimeout(() => {
        window.scrollTo(0, document.body.scrollHeight);
      }, 100); // even wachten tot layout klaar is
    };
  </script>
</body>
</html>
