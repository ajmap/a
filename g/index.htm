<!DOCTYPE html>
 <html lang="en">                             
 <head>                               
     <meta charset="UTF-8">                                                 
     <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
     <title>Color Quarter Navigation</title>                                
     <style>                                                                   
         * {
             margin: 0;
         }
         #a {
         background-color: black;
         width: 100vw;
         height: 100vh;
         }
         .b {
             position: fixed;
             bottom: 0;
             right: 0;
             width: 10vw;
             height: 10vw;
             background-color: white;
             border-radius: 50%;
             cursor: pointer;
             transition: transform 0.3s, background 0.3s;
             display: none;
             justify-content: center;
             align-items: center;
         }
         .c {
             transform: scale(1.5);
             bottom: 4vw;
             right: 4vw;
             width: 15vw;
             height: 15vw;
             border-radius: 50%;
             background: conic-gradient(
                 Aqua 0deg 90deg,
                 Pink 90deg 180deg,
                 Pink 180deg 270deg,
                 Aqua 270deg 360deg
             );
             position: absolute;
         }
         .c div {
             position: absolute;
             width: 50%;
             height: 50%;
             cursor: pointer;
         }
         .d { top: 0; left: 0; background-color: Aqua; border-top-left-radius: 100%; }
         .e { top: 0; right: 0; background-color: Pink; border-top-right-radius: 100%; }
         .f { bottom: 0; left: 0; background-color: Pink; border-bottom-left-radius: 100%; }
         .g { bottom: 0; right: 0; background-color: Aqua; border-bottom-right-radius: 100%; }
         .scrn {
             display: none;
         }
        #text-container {
    font-family: monospace;
    font-size: 4.3vw;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 20px;
    cursor: pointer; /* Indicate it's clickable */
    font-family: monospace; /* Ensure consistent spacing */
    white-space: pre-wrap; /* Preserve line breaks and spaces */
  }
  .hidden {
    visibility: hidden;
  }
     </style>
 </head>
 <body>
     <div id="a"></div>
     <div class="b" id="b"></div>
     <div class="scrn" id="S1"><div id="text-container"></div></div>
     <div class="scrn" id="S2">SCREEN TWO</div>
     <div class="scrn" id="S3">SCREEN THREE</div>
     <div class="scrn" id="S4">SCREEN FOUR</div>
     <div class="scrn" id="S5"></div>
     <div class="scrn" id="S6"></div>
     <div class="scrn" id="S7"></div>
     <div class="scrn" id="S8"></div>
   <script>
       let a = document.getElementById("a");        // startscherm
       let b = document.getElementById('b');        // button
       let c = false;                               // expanded              
       let S1 = document.getElementById("S1");
       let S2 = document.getElementById("S2");
       let S3 = document.getElementById("S3");
       let S4 = document.getElementById("S4");
     a.addEventListener("click", () => {
         if (!document.fullscreenElement) {
           document.documentElement.requestFullscreen();
         } else if (document.exitFullscreen) {
           document.exitFullscreen();
         }
         a.style.display = "none";
         b.style.display = "flex";
       });
 
         b.addEventListener('click', (event) => {
             if (!c) {
                 b.classList.add('c');
                 b.innerHTML = `
                     <div class='d' onclick='changeColor1(event, "white")'></div>
                     <div class='e' onclick='changeColor2(event, "white")'></div>
                     <div class='f' onclick='changeColor3(event, "white")'></div>
                     <div class='g' onclick='changeColor4(event, "white")'></div>
                 `;
                 c = true;
             } else {
                 resetButton();
             }
             event.stopPropagation();
         });
 
         function changeColor1(event, color) {
             event.stopPropagation(); // Prevents click from propagating to parent
             document.body.style.backgroundColor = color;
             resetButton();
             S1.style.display = "block";
             S2.style.display = "none";
             S3.style.display = "none";
             S4.style.display = "none";
         }
         function changeColor2(event, color) {
             event.stopPropagation(); // Prevents click from propagating to parent
             document.body.style.backgroundColor = color;
             resetButton();
             S2.style.display = "block";
             S1.style.display = "none";
             S3.style.display = "none";
             S4.style.display = "none";
         }
         function changeColor3(event, color) {
             event.stopPropagation();
             document.body.style.backgroundColor = color;
             resetButton();
             S3.style.display = "block";
             S1.style.display = "none";
             S2.style.display = "none";
             S4.style.display = "none";
         }
         function changeColor4(event, color) {
             event.stopPropagation(); 
             document.body.style.backgroundColor = color;
             resetButton();
             S4.style.display = "block";
             S1.style.display = "none";
             S2.style.display = "none";
             S3.style.display = "none";
         }
         function resetButton() {
             b.classList.remove('c');
             b.innerHTML = '';
             c = false;
         }
 
         document.body.addEventListener('click', () => {
             if (c) {
                 resetButton();
             }
         });
      const textContainer = document.getElementById('text-container');
  const originalText = "Did I give ‘em something they’ve never seen before? Yeah. Good. That’s what they came for. Tomorrow? New sound. New look. New universe to invent. You think I’m gonna repeat myself? Please. I ain’t here forever. But long after I’m gone, the music will still be playing. That’s how you know you did it right. Close your eyes, breathe deep. If you dream in color, baby, you’re doing it right.";
  const localStorageKey = 'erasedTextData2';
  let nextCharToRemove = 'a';

  function getTextToDisplay() {
    let savedData = localStorage.getItem(localStorageKey);
    let currentText = originalText;
    let charsToHide = [];

    if (savedData) {
      const parsedData = JSON.parse(savedData);
      currentText = parsedData.originalText; // Keep the original text for reference
      nextCharToRemove = parsedData.nextChar;
      charsToHide = parsedData.hiddenChars || [];
    }

    let displayText = '';
    for (let i = 0; i < currentText.length; i++) {
      const char = currentText[i];
      const lowerChar = char.toLowerCase();
      if (charsToHide.includes(lowerChar)) {
        displayText += `<span class="hidden">${char}</span>`;
      } else {
        displayText += char;
      }
    }

    return displayText;
  }

  function updateTextOnScreen() {
    textContainer.innerHTML = getTextToDisplay();
  }

  function saveProgress(hiddenChars, nextChar) {
    localStorage.setItem(localStorageKey, JSON.stringify({ originalText: originalText, hiddenChars: hiddenChars, nextChar: nextChar }));
  }

  function eraseNextCharacter(hiddenChars) {
    if (nextCharToRemove > 'z') {
      return hiddenChars; // All lowercase letters have been removed
    }

    if (!hiddenChars.includes(nextCharToRemove)) {
      hiddenChars.push(nextCharToRemove);
    }

    // Move to the next character
    let nextCharCode = nextCharToRemove.charCodeAt(0) + 1;
    while (nextCharCode <= 'z'.charCodeAt(0)) {
      const potentialNextChar = String.fromCharCode(nextCharCode);
      let found = false;
      for (let i = 0; i < originalText.length; i++) {
        if (originalText[i].toLowerCase() === potentialNextChar && !hiddenChars.includes(potentialNextChar)) {
          nextCharToRemove = potentialNextChar;
          found = true;
          break;
        }
      }
      if (found) {
        break;
      }
      nextCharCode++;
    }
    if (nextCharCode > 'z'.charCodeAt(0)) {
      nextCharToRemove = 'z' + 1; // Mark as done
    }

    return hiddenChars;
  }

  // Initial load
  updateTextOnScreen();

  // Event listener for clicking the text
  textContainer.addEventListener('click', () => {
    localStorage.removeItem(localStorageKey);
    updateTextOnScreen(); // Reset to original text
    nextCharToRemove = 'a'; // Reset the character removal progress
  });

  // Before the page is loaded, apply the next erasure
  window.addEventListener('beforeunload', () => {
    let savedData = localStorage.getItem(localStorageKey);
    let currentHiddenChars = [];
    if (savedData) {
      currentHiddenChars = JSON.parse(savedData).hiddenChars || [];
    }

    if (nextCharToRemove <= 'z') {
      const newHiddenChars = eraseNextCharacter(currentHiddenChars);
      saveProgress(newHiddenChars, nextCharToRemove);
    }
  });

  // Alternative approach to ensure erasure happens even if beforeunload doesn't always fire reliably
  window.addEventListener('load', () => {
    let savedData = localStorage.getItem(localStorageKey);
    if (!savedData) { // Only do this if it's the very first load or after a reset
      let currentHiddenChars = [];
      if (nextCharToRemove <= 'z') {
        const newHiddenChars = eraseNextCharacter(currentHiddenChars);
        saveProgress(newHiddenChars, nextCharToRemove);
        updateTextOnScreen();
      }
    }
  });
     </script>
 </body>
 </html>
<!--
abcdefg
-->
