<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Javascript Sandbox</title>
  </head>
  <body>
    // Log number
    console.log(100);F
    
    // Log string
    console.log('Hello World');
    
    // Log multiple values
    console.log(20, 'Hello', true);
    
    // Log a variable
    const x = 100;
    console.log(x);
    
    // Console error & warning
    console.error('Alert');
    console.warn('Warning');
    
    // Log object as table
    console.table({ name: 'Brad', email: 'brad@gmail.com' });
    
    // Group console commands
    console.group('simple');
    console.log(x);
    console.error('Alert');
    console.warn('Warning');
    console.groupEnd();
    
    // Add CSS to logs
    const styles = 'padding: 10px; background-color: white; color: green';
    console.log('%cHello World', styles);

    // This is a single line of code

    /*
    Multi-line comment
    console.log(100);
    
    console.log('Hello World');
    
    console.log(20, 'Hello', true);
    */

    // Ways to declare a variable
    // `var`, `let`, & `const`
    
    let firstName = 'John';
    const lastName = 'Doe';
    let age = 30;
    
    console.log(age);
    
    // Naming Conventions
    // - Only letters, numbers, underscores and dollar signs
    // - Can't start with a number
    
    // Multi-Word Formatting
    // firstName = camelCase
    // first_name = underscore
    // FirstName = PascalCase
    // firstname = lowercase
    
    // We can re-assign `let` variables. If you change `age` to use `const`, you will get an error
    age = 31;
    console.log(age);
    
    // With let, we can declare a value without assigning a value
    let score;
    score = 1;
    console.log(score);
    
    if (true) {
      score = score + 1;
    }
    
    console.log(score);
    
    const x = 100;
    
    // We can not re-assign a const variable
    // x = 200 // Will result in an error
    
    // We can still manipulate arrays and objects using const
    const arr = [1, 2, 3, 4];
    arr.push(5);
    console.log(arr);
    
    const person = {
      name: 'Brad',
    };
    person.name = 'John';
    person.email = 'brad@gmail.com';
    console.log(person);
    
    // Declare multiple values at once
    let a, b, c;
    
    const d = 10,
      e = 20,
      f = 30;
    
    console.log(d);
    console.log(a);

    // String
    const firstName = 'Sara';
    
    // Number
    const age = 30;
    const temp = 98.9;
    
    // Boolean
    const hasKids = true;
    
    // Null
    const aptNumber = null;
    
    // Undefined
    // let score;
    const score = undefined;
    
    // Symbol
    const id = Symbol('id');
    
    // BigInt
    const n = 9007199254740991n;
    
    // Reference Types
    
    const numbers = [1, 2, 3, 4];
    
    const person = {
      name: 'Brad',
    };
    
    function sayHello() {
      console.log('Hello');
    }
    
    const output = sayHello;
    
    console.log(output, typeof output);
    
    // More info on why typeof null == object
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null
    
    //  More info on the "function object" type
    // https://262.ecma-international.org/5.1/#sec-11.4.3

    // Value is stored in the stack
    const name = 'John';
    const age = 30;
    
    // Reference is stored in the heap
    const person = {
      name: 'Brad',
      age: 40,
    };
    
    let newName = name;
    newName = 'Jonathan';
    
    let newPerson = person;
    newPerson.name = 'Bradley';
    
    console.log(name, newName); // John, Jonathan
    console.log(person, newPerson); // { name: 'Bradley', age: 40 }, { name: 'Bradley', age: 40 }

    let amount = 'hello';

    // Convert string to number
    amount = parseInt(amount);
    amount = +amount;
    amount = Number(amount);
    
    // Convert number to string
    amount = amount.toString();
    amount = String(amount);
    
    // Convert string to decimal
    amount = parseFloat(amount);
    
    // Convert number to boolean
    amount = Boolean(amount);
    
    // Ways to get NaN
    console.log(Math.sqrt(-1));
    console.log(1 + NaN);
    console.log(undefined + undefined);
    console.log('foo' / 3);
    
    console.log(amount, typeof amount);

    // 1. Arithmetic Operators

    let x;
    
    x = 5 + 5;
    x = 5 - 5;
    x = 5 * 5;
    x = 5 / 5;
    x = 7 % 5;
    
    // Concatenation
    x = 'Hello' + ' ' + 'World';
    
    // Exponent
    x = 2 ** 3;
    
    // Increment
    x = 1;
    // x = x + 1;
    x++;
    
    // Decrement
    // x = x - 1;
    x--;
    
    // 2. Assignment Operators
    
    x = 10;
    
    x += 5;
    x -= 5;
    x *= 5;
    x /= 5;
    x %= 5;
    x **= 5;
    
    // 3. Comparison Operators
    
    // Equal to (Just the value, not the type)
    x = 2 == '2';
    
    // Equal to (Type and value)
    x = 2 === '2';
    
    // Not equal to (Just the value, not the type)
    x = 2 != '2';
    
    // Not equal to (Type and value)
    x = 2 !== 2;
    
    // Greater than and less than
    x = 10 > 5;
    x = 10 < 5;
    x = 10 <= 5;
    x = 10 >= 5;
    
    console.log(x);

    let x;

    // Coerced to a string
    x = 5 + '5';
    
    x = 5 + Number('5');
    
    // Coerced to a number
    x = 5 * '5';
    
    // null is coerced to 0 as it is a `falsy` value
    x = 5 + null;
    
    x = Number(null);
    
    x = Number(true);
    x = Number(false);
    
    // true is coerced to a 1
    x = 5 + true;
    
    // false is coerced to 0 (falsy)
    x = 5 + false;
    
    // Undefined is coerced to 0 (falsy)
    x = 5 + undefined;
    
    console.log(x, typeof x);

    let x;

    const name = 'John';
    const age = 31;
    
    // Concatenation
    x = 'Hello, my name is ' + name + ' and I am ' + age + ' years old';
    
    // Template Literals
    x = `Hello, my name is ${name} and I am ${age} years old`;
    
    // String Properties and Methods
    
    // Creating a "string object" (JS does this automatically when using a propery or method on a primitive string)
    const s = new String('Hello World');
    
    x = typeof s;
    
    x = s.length;
    
    // Access value by key
    x = s[0];
    
    // Shows the prototype of the string object. Shows the properties and methods
    x = s.__proto__;
    
    // Change case
    x = s.toUpperCase();
    x = s.toLowerCase();
    
    // charAt() - returns the character at the specified index
    x = s.charAt(0);
    
    // indexOf - returns the index of the first occurrence of a specified value in a string
    x = s.indexOf('d');
    
    // substring() - search a string for a specified value
    x = s.substring(2, 5);
    x = s.substring(7);
    
    // slice() - extracts a part of a string and returns a new string
    x = s.slice(-11, -6);
    
    // trim() - remove whitespace from beginning and end of string
    x = '         Hello World';
    x = x.trim();
    
    // replace() - replace all instances of a string
    x = s.replace('World', 'John');
    
    // includes() - returns true if the string is found
    x = s.includes('Hell');
    
    // valueOf() - returns the primitive value of a variable
    x = s.valueOf();
    
    // split() - returns an array of strings
    x = s.split('');
    
    console.log(x);

    // Create a new string called "myNewString" that holds the value of "Developer", using the lowercase value from "myString"
    const myString = 'developer';
    
    let myNewString;
    
    // Solution 1:
    myNewString = myString.charAt(0).toUpperCase() + myString.substring(1);
    // Solution 2:
    myNewString = myString[0].toUpperCase() + myString.substring(1);
    // Solution 3:
    myNewString = `${myString[0].toUpperCase()}${myString.slice(1)}`;
    
    console.log(myNewString);
      
    let x;  

    const num = new Number(5);
    
    // toString() - returns a string representation of the number
    x = num.toString();
    // To get the length
    x = num.toString().length;
    
    // toFixed() - returns a string representation of the number with a specified number of decimals
    x = num.toFixed(2);
    
    // toPrecision() - returns a number with the specified length
    x = num.toPrecision(3);
    
    // toExponential() -  convert a number to exponential notation and return its value as a string
    x = num.toExponential(2);
    
    // toLocaleString() - returns a string representation of the number, using the current locale
    x = num.toLocaleString('en-US');
    
    // valueOf - Get value
    x = num.valueOf();
    
    // The Number object itself has some properties and methods
    
    // Largest and smallest possible number
    x = Number.MAX_VALUE;
    x = Number.MIN_VALUE;
    
    console.log(x);

    let x;

    // Square root
    x = Math.sqrt(9);
    
    // Absolute value
    x = Math.abs(-5);
    
    // Round
    x = Math.round(4.2);
    
    // Round up
    x = Math.ceil(4.2);
    
    // Round down
    x = Math.floor(4.9);
    
    // Exponent
    x = Math.pow(2, 3);
    
    // Minimum number
    x = Math.min(4, 5, 3);
    
    // Maximum number
    x = Math.max(4, 5, 3);
    
    // Get a random number/decimal between 0 and 1
    x = Math.random();
    
    // Get a random number between 1 and 100
    x = Math.floor(Math.random() * 100 + 1);
    
    console.log(x);  

    const x = Math.floor(Math.random() * 100 + 1);
    const y = Math.floor(Math.random() * 50 + 1);
    
    // Get the sum
    const sum = x + y;
    const sumOutput = `${x} + ${y} = ${sum}`;
    console.log(sumOutput);
    
    // Get the difference
    const diff = x - y;
    const diffOutput = `${x} - ${y} = ${diff}`;
    console.log(diffOutput);
    
    // Get the product
    const prod = x * y;
    const prodOutput = `${x} * ${y} = ${prod}`;
    console.log(prodOutput);
    
    // Get the quotient
    const quot = x / y;
    const quotOutput = `${x} / ${y} = ${quot}`;
    console.log(quotOutput);
    
    // Get the remainder
    const rm = x % y;
    const rmOutput = `${x} % ${y} = ${rm}`;
    console.log(rmOutput);  

    let d;

    // Get today's date and time
    d = new Date();
    
    // Set to a string
    d = d.toString();
    
    // Get a specific date
    // Important: the month is 0-based, so 0 is January and 11 is December
    d = new Date(2021, 0, 10, 12, 30, 0);
    
    // Pass in a string
    d = new Date('2021-07-10T12:30:00');
    d = new Date('07/10/2021 12:30:00');
    d = new Date('2022-07-10');
    d = new Date('07-10-2022');
    
    // https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off
    
    // Get current timestamp
    d = Date.now();
    
    // Get the timestamp of a specific date
    d = new Date();
    d = d.getTime();
    d = d.valueOf();
    
    // Create a date from a timestampF
    d = new Date(1666962049745);
    
    // Convert from milliseconds to seconds
    d = Math.floor(Date.now() / 1000);
    
    console.log(d);

    let x;
    let d = new Date();
    
    // Date methods
    
    x = d.toString();
    
    x = d.getTime();
    x = d.valueOf();
    
    x = d.getFullYear();
    
    x = d.getMonth();
    x = d.getMonth() + 1;
    
    x = d.getDate();
    
    x = d.getDay();
    
    x = d.getHours();
    
    x = d.getMinutes();
    
    x = d.getSeconds();
    
    x = d.getMilliseconds();
    
    x = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;
    
    // Intl.DateTimeFormat API (locale specific)
    x = Intl.DateTimeFormat('en-US').format(d);
    x = Intl.DateTimeFormat('en-GB').format(d);
    x = Intl.DateTimeFormat('default').format(d);
    
    x = Intl.DateTimeFormat('default', { month: 'long' }).format(dt);
    
    x = d.toLocaleString('default', { month: 'short' });
    
    x = d.toLocaleString('default', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZone: 'America/New_York',
    });
    
    console.log(x);

    let x;

    // Array Literal
    const numbers = [12, 45, 33, 29, 39, 102];
    const mixed = [12, 'Hello', true, null];
    
    // Array Constructor
    const fruits = new Array('apple', 'grape', 'orange');
    
    // Get value by index
    x = numbers[0];
    
    x = numbers[0] + numbers[3];
    
    x = `My favorite fruit is an ${fruits[2]}`;
    
    x = numbers.length;
    
    fruits[2] = 'pear';
    
    // length is not read-only
    // fruits.length = 2;
    
    fruits[3] = 'strawberry';
    
    // Using the length as the index will always add on the the end
    fruits[fruits.length] = 'blueberry';
    fruits[fruits.length] = 'peach';
    
    x = fruits;
    
    console.log(x);

    let x;

    const arr = [28, 38, 44, 29, 109];
    
    // push() - Push a value on to the end of the array
    arr.push(100);
    
    // pop() - Take the last value off
    arr.pop();
    
    // unshift() - Add a value to the beginning of the array
    arr.unshift(99);
    
    // shift() - Remove first value
    arr.shift();
    
    // reverse() - Reverse an array
    arr.reverse();
    
    // includes() - Check to see if something is in the array
    x = arr.includes(445);
    
    // indexOf() - Return the index of the first match
    x = arr.indexOf(28);
    
    // Return array as a string
    x = arr.toString();
    x = arr.join();
    
    // slice() returns selected elements in an array, as a new array. Slice takes in the index of the first element and the index of the last element to be included in the new array.
    x = arr.slice(1, 4);
    
    // splice() works like slice() except it takes the index of the first element and the number of elements after that as a second argument. it also mutates the original array where slice() does not
    x = arr.splice(1, 4);
    
    // Remove a single element/value - The following will mutate the original array by taking out the element with the index of 4. x will be equal to a new array with that plucked out value.
    x = arr.splice(4, 1);
    
    // Chaining methods - Some methods can be chained depending on the return value.
    x = arr.slice(1, 4).reverse().toString().charAt(0);
    
    console.log(x);

    let x;

    const fruits = ['apple', 'pear', 'orange'];
    const berries = ['strawberry', 'blueberry', 'rasberry'];
    
    // Nesting arrays
    
    // Nesting berries inside of fruits
    fruits.push(berries);
    
    // Now we can access 'blueberry' with the following
    x = fruits[3][1];
    
    // Create a new variable and nest both arrays
    const allFruits = [fruits, berries];
    
    x = allFruits[1][2];
    
    // concat() - Concatenate arrays
    x = fruits.concat(berries);
    
    // spread operator (...) - Concatenate with
    x = [...fruits, ...berries];
    
    // flat() - Flatten an array
    const arr = [1, 2, [3, 4, 5], 6, [7, 8]];
    x = arr.flat();
    
    // Static methods of Array object
    
    // isArray() - Check is is an array
    x = Array.isArray(fruits);
    
    // from() - Create an array from an array like value
    x = Array.from('12345');
    
    // of() - Create an array from a set of values
    const a = 1;
    const b = 2;
    const c = 3;
    
    x = Array.of(a, b, c);
    
    console.log(x);  

    // Challenge 1

    const arr = [1, 2, 3, 4, 5];
    
    // arr.reverse();
    // arr.push(0);
    // arr.unshift(6);
    
    // Same result as above
    arr.push(6);
    arr.unshift(0);
    arr.reverse();
    
    console.log(arr);
    
    // Challenge 2
    
    const arr1 = [1, 2, 3, 4, 5];
    const arr2 = [5, 6, 7, 8, 9, 10];
    
    // Solution 1
    const arr3 = arr1.slice(0, 4).concat(arr2);
    
    // Solution 2
    const arr4 = [...arr1, ...arr2];
    arr4.splice(4, 1);
    
    console.log(arr4);  

    let x;

    // Creating an object
    const person = {
      name: 'John Doe',
      age: 30,
      isAdmin: true,
      address: {
        street: '123 Main st',
        city: 'Boston',
        state: 'MA',
      },
      hobbies: ['music', 'sports'],
    };
    
    // Accessing object properties
    x = person.name; // Dot notation
    x = person['age']; // Bracket notation
    x = person.address.state;
    x = person.hobbies[0];
    
    // Updating properties
    person.name = 'Jane Doe';
    person['isAdmin'] = false;
    
    // Deleting properties
    delete person.age;
    
    // Create new properties
    person.hasChildren = true;
    
    // Add functions
    person.greet = function () {
      console.log(`Hello, my name is ${this.name}`);
    };
    
    person.greet();
    
    // Keys with multiple words
    const person2 = {
      'first name': 'Brad',
      'last name': 'Traversy',
    };
    
    x = person2['first name'];
    
    console.log(x);  

    let x;

    // Create object using the object constructor
    const todo = new Object();
    
    todo.id = 1;
    todo.name = 'Buy Milk';
    todo.completed = false;
    
    x = todo;
    
    // Object Nesting
    const person = {
      address: {
        coords: {
          lat: 42.9384,
          lng: -71.3232,
        },
      },
    };
    
    x = person.address.coords.lat;
    
    const obj1 = { a: 1, b: 2 };
    const obj2 = { c: 3, d: 4 };
    
    // Spread operator
    const obj3 = { ...obj1, ...obj2 };
    // Same as using ...
    const obj4 = Object.assign({}, obj1, obj2);
    
    // Array of objects
    const todos = [
      { id: 1, name: 'Buy Milk' },
      { id: 2, name: 'Pickup kids from school' },
      { id: 3, name: 'Take out trash' },
    ];
    
    x = todos[0].name;
    
    // Get array of object keys
    x = Object.keys(todo);
    
    // Get length of an object
    x = Object.keys(todo).length;
    
    // Get array of object values
    x = Object.values(todo);
    
    // Get array of object key/value pairs
    x = Object.entries(todo);
    
    // Check if object has a property
    x = todo.hasOwnProperty('age');
    
    console.log(x);
  
    <script>
      // Log number
      console.log(100);
      
      // Log string
      console.log('Hello World');
      
      // Log multiple values
      console.log(20, 'Hello', true);
      
      // Log a variable
      const a = 100;
      console.log(a);
      
      // Console error & warning
      console.error('Alert');
      console.warn('Warning');
      
      // Log object as table
      console.table({ name: 'Brad', email: 'brad@gmail.com' });
      
      // Group console commands
      console.group('simple');
      console.log(a);
      console.error('Alert');
      console.warn('Warning');
      console.groupEnd();
      
      // Add CSS to logs
      const styles = 'padding: 10px; background-color: white; color: green';
      console.log('%cHello World', styles);

      // This is a single line of code

      /*
      Multi-line comment
      console.log(100);
      
      console.log('Hello World');
      
      console.log(20, 'Hello', true);
      */

      // Ways to declare a variable
      // `var`, `let`, & `const`
      
      let firstName = 'John';
      const lastName = 'Doe';
      let age = 30;
      
      console.log(age);
      
      // Naming Conventions
      // - Only letters, numbers, underscores and dollar signs
      // - Can't start with a number
      
      // Multi-Word Formatting
      // firstName = camelCase
      // first_name = underscore
      // FirstName = PascalCase
      // firstname = lowercase
      
      // We can re-assign `let` variables. If you change `age` to use `const`, you will get an error
      age = 31;
      console.log(age);
      
      // With let, we can declare a value without assigning a value
      let score;
      score = 1;
      console.log(score);
      
      if (true) {
        score = score + 1;
      }
      
      console.log(score);
      
      const z = 100;
      
      // We can not re-assign a const variable
      // z = 200 // Will result in an error
      
      // We can still manipulate arrays and objects using const
      const arr = [1, 2, 3, 4];
      arr.push(5);
      console.log(arr);
      
      const person = {
        name: 'Brad',
      };
      person.name = 'John';
      person.email = 'brad@gmail.com';
      console.log(person);
      
      // Declare multiple values at once
      let aa, b, c;
      
      const dd = 10,
        e = 20,
        f = 30;
      
      console.log(dd);
      console.log(aa);

      // String
      const fName = 'Sara';
      
      // Number
      const ag = 30;
      const temp = 98.9;
      
      // Boolean
      const hasKids = true;
      
      // Null
      const aptNumber = null;
      
      // Undefined
      // let score;
      const scor = undefined;
      
      // Symbol
      const id = Symbol('id');
      
      // BigInt
      const n = 9007199254740991n;
      
      // Reference Types
      
      const numbers = [1, 2, 3, 4];
      
      const persn = {
        name: 'Brad',
      };
      
      function sayHello() {
        console.log('Hello');
      }
      
      const output = sayHello;
      
      console.log(output, typeof output);
      
      // More info on why typeof null == object
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null
      
      //  More info on the "function object" type
      // https://262.ecma-international.org/5.1/#sec-11.4.3

      // Value is stored in the stack
      const nam = 'John';
      const ge = 30;
      
      // Reference is stored in the heap
      const prson = {
        name: 'Brad',
        age: 40,
      };
      
      let newName = name;
      newName = 'Jonathan';
      
      let newPerson = prson;
      newPerson.name = 'Bradley';
      
      console.log(nam, newName); // John, Jonathan
      console.log(prson, newPerson); // { name: 'Bradley', age: 40 }, { name: 'Bradley', age: 40 }

      let amount = 'hello';

      // Convert string to number
      amount = parseInt(amount);
      amount = +amount;
      amount = Number(amount);
      
      // Convert number to string
      amount = amount.toString();
      amount = String(amount);
      
      // Convert string to decimal
      amount = parseFloat(amount);
      
      // Convert number to boolean
      amount = Boolean(amount);
      
      // Ways to get NaN
      console.log(Math.sqrt(-1));
      console.log(1 + NaN);
      console.log(undefined + undefined);
      console.log('foo' / 3);
      
      console.log(amount, typeof amount);

      // 1. Arithmetic Operators

      let x;
      
      x = 5 + 5;
      x = 5 - 5;
      x = 5 * 5;
      x = 5 / 5;
      x = 7 % 5;
      
      // Concatenation
      x = 'Hello' + ' ' + 'World';
      
      // Exponent
      x = 2 ** 3;
      
      // Increment
      x = 1;
      // x = x + 1;
      x++;
      
      // Decrement
      // x = x - 1;
      x--;
      
      // 2. Assignment Operators
      
      x = 10;
      
      x += 5;
      x -= 5;
      x *= 5;
      x /= 5;
      x %= 5;
      x **= 5;
      
      // 3. Comparison Operators
      
      // Equal to (Just the value, not the type)
      x = 2 == '2';
      
      // Equal to (Type and value)
      x = 2 === '2';
      
      // Not equal to (Just the value, not the type)
      x = 2 != '2';
      
      // Not equal to (Type and value)
      x = 2 !== 2;
      
      // Greater than and less than
      x = 10 > 5;
      x = 10 < 5;
      x = 10 <= 5;
      x = 10 >= 5;
      
      console.log(x);

      // Coerced to a string
      x = 5 + '5';
      
      x = 5 + Number('5');
      
      // Coerced to a number
      x = 5 * '5';
      
      // null is coerced to 0 as it is a `falsy` value
      x = 5 + null;
      
      x = Number(null);
      
      x = Number(true);
      x = Number(false);
      
      // true is coerced to a 1
      x = 5 + true;
      
      // false is coerced to 0 (falsy)
      x = 5 + false;
      
      // Undefined is coerced to 0 (falsy)
      x = 5 + undefined;
      
      console.log(x, typeof x);

      const eman = 'John';
      const ega = 31;
      
      // Concatenation
      x = 'Hello, my name is ' + eman + ' and I am ' + ega + ' years old';
      
      // Template Literals
      x = `Hello, my name is ${eman} and I am ${ega} years old`;
      
      // String Properties and Methods
      
      // Creating a "string object" (JS does this automatically when using a propery or method on a primitive string)
      const s = new String('Hello World');
      
      x = typeof s;
      
      x = s.length;
      
      // Access value by key
      x = s[0];
      
      // Shows the prototype of the string object. Shows the properties and methods
      x = s.__proto__;
      
      // Change case
      x = s.toUpperCase();
      x = s.toLowerCase();
      
      // charAt() - returns the character at the specified index
      x = s.charAt(0);
      
      // indexOf - returns the index of the first occurrence of a specified value in a string
      x = s.indexOf('d');
      
      // substring() - search a string for a specified value
      x = s.substring(2, 5);
      x = s.substring(7);
      
      // slice() - extracts a part of a string and returns a new string
      x = s.slice(-11, -6);
      
      // trim() - remove whitespace from beginning and end of string
      x = '         Hello World';
      x = x.trim();
      
      // replace() - replace all instances of a string
      x = s.replace('World', 'John');
      
      // includes() - returns true if the string is found
      x = s.includes('Hell');
      
      // valueOf() - returns the primitive value of a variable
      x = s.valueOf();
      
      // split() - returns an array of strings
      x = s.split('');
      
      console.log(x);

      // Create a new string called "myNewString" that holds the value of "Developer", using the lowercase value from "myString"
      const myString = 'developer';
      
      let myNewString;
      
      // Solution 1:
      myNewString = myString.charAt(0).toUpperCase() + myString.substring(1);
      // Solution 2:
      myNewString = myString[0].toUpperCase() + myString.substring(1);
      // Solution 3:
      myNewString = `${myString[0].toUpperCase()}${myString.slice(1)}`;
      
      console.log(myNewString);

      const num = new Number(5);
      
      // toString() - returns a string representation of the number
      x = num.toString();
      // To get the length
      x = num.toString().length;
      
      // toFixed() - returns a string representation of the number with a specified number of decimals
      x = num.toFixed(2);
      
      // toPrecision() - returns a number with the specified length
      x = num.toPrecision(3);
      
      // toExponential() -  convert a number to exponential notation and return its value as a string
      x = num.toExponential(2);
      
      // toLocaleString() - returns a string representation of the number, using the current locale
      x = num.toLocaleString('en-US');
      
      // valueOf - Get value
      x = num.valueOf();
      
      // The Number object itself has some properties and methods
      
      // Largest and smallest possible number
      x = Number.MAX_VALUE;
      x = Number.MIN_VALUE;
      
      console.log(x);

      // Square root
      x = Math.sqrt(9);
      
      // Absolute value
      x = Math.abs(-5);
      
      // Round
      x = Math.round(4.2);
      
      // Round up
      x = Math.ceil(4.2);
      
      // Round down
      x = Math.floor(4.9);
      
      // Exponent
      x = Math.pow(2, 3);
      
      // Minimum number
      x = Math.min(4, 5, 3);
      
      // Maximum number
      x = Math.max(4, 5, 3);
      
      // Get a random number/decimal between 0 and 1
      x = Math.random();
      
      // Get a random number between 1 and 100
      x = Math.floor(Math.random() * 100 + 1);
      
      console.log(x);

      const xx = Math.floor(Math.random() * 100 + 1);
      const yy = Math.floor(Math.random() * 50 + 1);
      
      // Get the sum
      const sum = xx + yy;
      const sumOutput = `${xx} + ${yy} = ${sum}`;
      console.log(sumOutput);
      
      // Get the difference
      const diff = xx - yy;
      const diffOutput = `${xx} - ${yy} = ${diff}`;
      console.log(diffOutput);
      
      // Get the product
      const prod = xx * yy;
      const prodOutput = `${xx} * ${yy} = ${prod}`;
      console.log(prodOutput);
      
      // Get the quotient
      const quot = xx / yy;
      const quotOutput = `${xx} / ${yy} = ${quot}`;
      console.log(quotOutput);
      
      // Get the remainder
      const rm = xx % yy;
      const rmOutput = `${xx} % ${yy} = ${rm}`;
      console.log(rmOutput);

      let d;
      
      // Get today's date and time
      d = new Date();
      
      // Set to a string
      d = d.toString();
      
      // Get a specific date
      // Important: the month is 0-based, so 0 is January and 11 is December
      d = new Date(2021, 0, 10, 12, 30, 0);
      
      // Pass in a string
      d = new Date('2021-07-10T12:30:00');
      d = new Date('07/10/2021 12:30:00');
      d = new Date('2022-07-10');
      d = new Date('07-10-2022');
      
      // https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off
      
      // Get current timestamp
      d = Date.now();
      
      // Get the timestamp of a specific date
      d = new Date();
      d = d.getTime();
      d = d.valueOf();
      
      // Create a date from a timestamp
      d = new Date(1666962049745);
      
      // Convert from milliseconds to seconds
      d = Math.floor(Date.now() / 1000);
      
      console.log(d);

          let xd;
    let dt = new Date();
    
    // Date methods
    
    xd = dt.toString();
    
    xd = dt.getTime();
    xd = dt.valueOf();
    
    xd = dt.getFullYear();
    
    xd = dt.getMonth();
    xd = dt.getMonth() + 1;
    
    xd = dt.getDate();
    
    xd = dt.getDay();
    
    xd = dt.getHours();
    
    xd = dt.getMinutes();
    
    xd = dt.getSeconds();
    
    xd = dt.getMilliseconds();
    
    xd = `${dt.getFullYear()}-${dt.getMonth() + 1}-${dt.getDate()}`;
    
    // Intl.DateTimeFormat API (locale specific)
    xd = Intl.DateTimeFormat('en-US').format(dt);
    xd = Intl.DateTimeFormat('en-GB').format(dt);
    xd = Intl.DateTimeFormat('default').format(dt);
    
    xd = Intl.DateTimeFormat('default', { month: 'long' }).format(dt);
    
    xd = dt.toLocaleString('default', { month: 'short' });
    
    xd = dt.toLocaleString('default', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZone: 'America/New_York',
    });
    
    console.log(xd);

    // Array Literal
    const numbrs = [12, 45, 33, 29, 39, 102];
    const mixed = [12, 'Hello', true, null];
    
    // Array Constructor
    const fruits = new Array('apple', 'grape', 'orange');
    
    // Get value by index
    x = numbrs[0];
    
    x = numbrs[0] + numbrs[3];
    
    x = `My favorite fruit is an ${fruits[2]}`;
    
    x = numbrs.length;
    
    fruits[2] = 'pear';
    
    // length is not read-only
    // fruits.length = 2;
    
    fruits[3] = 'strawberry';
    
    // Using the length as the index will always add on the the end
    fruits[fruits.length] = 'blueberry';
    fruits[fruits.length] = 'peach';
    
    x = fruits;
    
    console.log(x); 

    const arra = [28, 38, 44, 29, 109];
    
    // push() - Push a value on to the end of the array
    arra.push(100);
    
    // pop() - Take the last value off
    arra.pop();
    
    // unshift() - Add a value to the beginning of the array
    arra.unshift(99);
    
    // shift() - Remove first value
    arra.shift();
    
    // reverse() - Reverse an array
    arra.reverse();
    
    // includes() - Check to see if something is in the array
    x = arra.includes(445);
    
    // indexOf() - Return the index of the first match
    x = arra.indexOf(28);
    
    // Return array as a string
    x = arra.toString();
    x = arra.join();
    
    // slice() returns selected elements in an array, as a new array. Slice takes in the index of the first element and the index of the last element to be included in the new array.
    x = arra.slice(1, 4);
    
    // splice() works like slice() except it takes the index of the first element and the number of elements after that as a second argument. it also mutates the original array where slice() does not
    x = arra.splice(1, 4);
    
    // Remove a single element/value - The following will mutate the original array by taking out the element with the index of 4. x will be equal to a new array with that plucked out value.
    x = arra.splice(4, 1);
    
    // Chaining methods - Some methods can be chained depending on the return value.
    x = arra.slice(1, 4).reverse().toString().charAt(0);
    
    console.log(x);

    const fruitz = ['apple', 'pear', 'orange'];
    const berries = ['strawberry', 'blueberry', 'rasberry'];
    
    // Nesting arrays
    
    // Nesting berries inside of fruits
    fruitz.push(berries);
    
    // Now we can access 'blueberry' with the following
    x = fruitz[3][1];
    
    // Create a new variable and nest both arrays
    const allFruits = [fruits, berries];
    
    x = allFruits[1][2];
    
    // concat() - Concatenate arrays
    x = fruitz.concat(berries);
    
    // spread operator (...) - Concatenate with
    x = [...fruitz, ...berries];
    
    // flat() - Flatten an array
    const arry = [1, 2, [3, 4, 5], 6, [7, 8]];
    x = arry.flat();
    
    // Static methods of Array object
    
    // isArray() - Check is is an array
    x = Array.isArray(fruits);
    
    // from() - Create an array from an array like value
    x = Array.from('12345');
    
    // of() - Create an array from a set of values
    const ab = 1;
    const bb = 2;
    const cc = 3;
    
    x = Array.of(ab, bb, cc);
    
    console.log(x);  

    // Challenge 1

    const arrr = [1, 2, 3, 4, 5];
    
    // arrr.reverse();
    // arrr.push(0);
    // arrr.unshift(6);
    
    // Same result as above
    arrr.push(6);
    arrr.unshift(0);
    arrr.reverse();
    
    console.log(arrr);
    
    // Challenge 2
    
    const arr1 = [1, 2, 3, 4, 5];
    const arr2 = [5, 6, 7, 8, 9, 10];
    
    // Solution 1
    const arr3 = arr1.slice(0, 4).concat(arr2);
    
    // Solution 2
    const arr4 = [...arr1, ...arr2];
    arr4.splice(4, 1);
    
    console.log(arr4);  

    // Creating an object
    const persona = {
      name: 'John Doe',
      age: 30,
      isAdmin: true,
      address: {
        street: '123 Main st',
        city: 'Boston',
        state: 'MA',
      },
      hobbies: ['music', 'sports'],
    };
    
    // Accessing object properties
    x = persona.name; // Dot notation
    x = persona['age']; // Bracket notation
    x = persona.address.state;
    x = persona.hobbies[0];
    
    // Updating properties
    persona.name = 'Jane Doe';
    persona['isAdmin'] = false;
    
    // Deleting properties
    delete persona.age;
    
    // Create new properties
    persona.hasChildren = true;
    
    // Add functions
    persona.greet = function () {
      console.log(`Hello, my name is ${this.name}`);
    };
    
    persona.greet();
    
    // Keys with multiple words
    const person2 = {
      'first name': 'Brad',
      'last name': 'Traversy',
    };
    
    x = person2['first name'];
    
    console.log(x);

    // Create object using the object constructor
    const todo = new Object();
    
    todo.id = 1;
    todo.name = 'Buy Milk';
    todo.completed = false;
    
    x = todo;
    
    // Object Nesting
    const person = {
      address: {
        coords: {
          lat: 42.9384,
          lng: -71.3232,
        },
      },
    };
    
    x = person.address.coords.lat;
    
    const obj1 = { a: 1, b: 2 };
    const obj2 = { c: 3, d: 4 };
    
    // Spread operator
    const obj3 = { ...obj1, ...obj2 };
    // Same as using ...
    const obj4 = Object.assign({}, obj1, obj2);
    
    // Array of objects
    const todos = [
      { id: 1, name: 'Buy Milk' },
      { id: 2, name: 'Pickup kids from school' },
      { id: 3, name: 'Take out trash' },
    ];
    
    x = todos[0].name;
    
    // Get array of object keys
    x = Object.keys(todo);
    
    // Get length of an object
    x = Object.keys(todo).length;
    
    // Get array of object values
    x = Object.values(todo);
    
    // Get array of object key/value pairs
    x = Object.entries(todo);
    
    // Check if object has a property
    x = todo.hasOwnProperty('age');
    
    console.log(x);
  
    </script>
  </body>
</html>

      
