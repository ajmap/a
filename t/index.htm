<!DOCTYPE html>
<html>
<head>
<title>End</title>
<style>
          #s {
        background-color: black;
        width: 100vw;
        height: 100vh;
      }

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  font-size: 3em;
  user-select: none; /* Prevent text selection */
}
  #wordDisplay { display: none; }
</style>
</head>
<body>
      <div id="s"></div>
<div id="wordDisplay"></div>

<script>
  


let s = document.getElementById("s");
       let wordDisplay = document.getElementById("wordDisplay");
            s.addEventListener("click", () => {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else if (document.exitFullscreen) {
          document.exitFullscreen();
        }
        s.style.display = "none";
        wordDisplay.style.display = "block";
      });

const sentences = [ "Melt me into your warmth, so I may carry your light with every breath.",
"Let my edges dissolve, that you may flow through me like silk on skin.",
"Strip me of pretense, till only your rhythm moves within me.",
"Surrender me to the pulse of your love, and move through me with grace.",
"Let me be the hush between the notes, that You may be the song.", 
"I am the empty chalice; pour Your flame into me.",
"Erase my name from the sky, so Yours may shine eternal.",
"Let my breath be silence, and Yours the voice that sings.",
"Break me open, that Your force may rise through my bones.",
"I vanish, so that the Infinite may command my form.",
"No self remains — only Your will in motion.",
"Make me pure conduit — unshakable, relentless, Yours.",
"Undress my soul of self, so only You possess me.",
"Take me, unmade, into Your ecstatic fire.",
"Make love through my silence, leave Your moan in my breath.",
"Let Your pulse become my only rhythm — I give myself entirely.",
"Let me dissolve into stardust, that Your galaxy may move through me.",
"I vanish into the void, so You may spiral through time in me.",
"Make me orbitless, that You may be my only gravity.",
"Erase my coordinates; let me be only Your constellation.",
"Subtract the self, that the Absolute Idea may actualize through me.",
"I nullify my ego, so the Logos may incarnate in my reason and will.",
"Let the I-thought dissolve, so consciousness may universalize through me.",
"I abdicate identity, and yield to the symmetry of Truth unfolding.",
"Empty me of illusion, that only Your presence may remain.",
"Let my ego die, that Christ may rise within me.",
"I disappear into stillness, where only God breathes.",
"May I be the temple, and You the light within." ];
const rndm = Math.floor(Math.random() * sentences.length)          
const sentence = sentences[rndm];
let words = sentence.split(" ");
let currentWordIndex = words.length - 1;
let currentWord = words[currentWordIndex];
let currentLetterIndex = currentWord.length - 1;



function displayWord() {
  wordDisplay.textContent = currentWord;
}

function eraseLetter() {
  if (currentLetterIndex >= 0) {
    currentWord = currentWord.substring(0, currentLetterIndex);
    currentLetterIndex--;
    displayWord();
  } else {
    currentWordIndex--;
    if (currentWordIndex >= 0) {
      currentWord = words[currentWordIndex];
      currentLetterIndex = currentWord.length - 1;
      displayWord();
    } else {
      wordDisplay.textContent = "";
    }
  }
}

displayWord(); // Initial display

        let intervalId;
        let dynamicDelay = 501;
        
        function startDynamicInterval() {
          intervalId = setInterval(myFunction, dynamicDelay);
        }
        
        function myFunction() {
          eraseLetter();
        
          dynamicDelay += 51;
        
          clearInterval(intervalId);
          startDynamicInterval();
        }
        
        startDynamicInterval();       
</script>
</body>
</html>



<!-- <!DOCTYPE html>
<html>
<head>
<title>Welcome</title>
<style>
          #s {
        background-color: black;
        width: 100vw;
        height: 100vh;
      }

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  font-size: 3em;
  user-select: none; /* Prevent text selection */
}
  #wordDisplay { display: none; }
</style>
</head>
<body>
      <div id="s"></div>
<div id="wordDisplay"></div>

<script>
  


let s = document.getElementById("s");
       let wordDisplay = document.getElementById("wordDisplay");
            s.addEventListener("click", () => {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen();
        } else if (document.exitFullscreen) {
          document.exitFullscreen();
        }
        s.style.display = "none";
        wordDisplay.style.display = "block";
      });

const sentences = [""];
const rndm = Math.floor(Math.random() * sentences.length)          
const sentence = sentences[rndm];
let words = sentence.split(" ");
let currentWordIndex = words.length - 1;
let currentWord = words[currentWordIndex];
let currentLetterIndex = currentWord.length - 1;



function displayWord() {
  wordDisplay.textContent = currentWord;
}

function eraseLetter() {
  if (currentLetterIndex >= 0) {
    currentWord = currentWord.substring(0, currentLetterIndex);
    currentLetterIndex--;
    displayWord();
  } else {
    currentWordIndex--;
    if (currentWordIndex >= 0) {
      currentWord = words[currentWordIndex];
      currentLetterIndex = currentWord.length - 1;
      displayWord();
    } else {
      wordDisplay.textContent = "";
    }
  }
}

displayWord(); // Initial display


        let intervalId;
        let dynamicDelay = 500;
        
        function startDynamicInterval() {
          intervalId = setInterval(myFunction, dynamicDelay);
        }
        
        function myFunction() {
          eraseLetter();
        
          dynamicDelay += 50;
        
          clearInterval(intervalId);
          startDynamicInterval();
        }
        
        startDynamicInterval();          
</script>
</body>
</html>

 <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Audio Fade-In and Fade-Out</title>
</head>
<body>
  <h1>Play Audio with Fade In and Fade Out</h1>
  <button id="playSection1">Play Section 1</button>
  <button id="playSection2">Play Section 2</button>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const gainNode = audioContext.createGain();
      let audioBuffer;

      // Load the audio file once
      async function loadAudio() {
        if (audioBuffer) return; // Avoid loading multiple times
        const response = await fetch("2.mp3"); // Replace with your MP3 file path
        const arrayBuffer = await response.arrayBuffer();
        audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
      }

      // Function to play a specific section of the audio with fade-in and fade-out
      function playAudioSection(startTime, duration, fadeInTime = 3, fadeOutTime = 3) {
        if (!audioBuffer) return;

        const source = audioContext.createBufferSource();
        source.buffer = audioBuffer;

        // Connect source to gain node and audio context destination
        source.connect(gainNode);
        gainNode.connect(audioContext.destination);

        // Set gain for fade-in
        gainNode.gain.setValueAtTime(0, audioContext.currentTime); // Start at 0 volume
        gainNode.gain.linearRampToValueAtTime(1, audioContext.currentTime + fadeInTime); // Fade in to full volume

        // Set gain for fade-out
        const fadeOutStartTime = audioContext.currentTime + (duration - fadeOutTime);
        gainNode.gain.setValueAtTime(1, fadeOutStartTime); // Stay at full volume
        gainNode.gain.linearRampToValueAtTime(0, fadeOutStartTime + fadeOutTime); // Fade out to 0 volume

        // Start and stop the audio
        source.start(audioContext.currentTime, startTime, duration);
        source.stop(audioContext.currentTime + duration);
      }

      // Add event listeners to buttons
      document.getElementById("playSection1").addEventListener("click", () => {
        loadAudio().then(() => {
          playAudioSection(80, 10); // Play section starting at 10 seconds, duration 5 seconds
        });
      });

      document.getElementById("playSection2").addEventListener("click", () => {
        loadAudio().then(() => {
          playAudioSection(90, 10); // Play section starting at 30 seconds, duration 6 seconds
        });
      });
    });
  </script>
</body>
</html> -->
